// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: noble/tariff/v1/tariff.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DistributionEntity struct {
	Address string                      `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Share   cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=share,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"share"`
}

func (m *DistributionEntity) Reset()         { *m = DistributionEntity{} }
func (m *DistributionEntity) String() string { return proto.CompactTextString(m) }
func (*DistributionEntity) ProtoMessage()    {}
func (*DistributionEntity) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d127694bea2fc42, []int{0}
}
func (m *DistributionEntity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DistributionEntity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DistributionEntity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DistributionEntity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DistributionEntity.Merge(m, src)
}
func (m *DistributionEntity) XXX_Size() int {
	return m.Size()
}
func (m *DistributionEntity) XXX_DiscardUnknown() {
	xxx_messageInfo_DistributionEntity.DiscardUnknown(m)
}

var xxx_messageInfo_DistributionEntity proto.InternalMessageInfo

func (m *DistributionEntity) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type Params struct {
	Share                cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=share,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"share"`
	DistributionEntities []DistributionEntity        `protobuf:"bytes,2,rep,name=distribution_entities,json=distributionEntities,proto3" json:"distribution_entities"`
	TransferFeeBps       cosmossdk_io_math.Int       `protobuf:"bytes,3,opt,name=transfer_fee_bps,json=transferFeeBps,proto3,customtype=cosmossdk.io/math.Int" json:"transfer_fee_bps"`
	TransferFeeMax       cosmossdk_io_math.Int       `protobuf:"bytes,4,opt,name=transfer_fee_max,json=transferFeeMax,proto3,customtype=cosmossdk.io/math.Int" json:"transfer_fee_max"`
	TransferFeeDenom     string                      `protobuf:"bytes,5,opt,name=transfer_fee_denom,json=transferFeeDenom,proto3" json:"transfer_fee_denom,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d127694bea2fc42, []int{1}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetDistributionEntities() []DistributionEntity {
	if m != nil {
		return m.DistributionEntities
	}
	return nil
}

func (m *Params) GetTransferFeeDenom() string {
	if m != nil {
		return m.TransferFeeDenom
	}
	return ""
}

func init() {
	proto.RegisterType((*DistributionEntity)(nil), "noble.tariff.v1.DistributionEntity")
	proto.RegisterType((*Params)(nil), "noble.tariff.v1.Params")
}

func init() { proto.RegisterFile("noble/tariff/v1/tariff.proto", fileDescriptor_8d127694bea2fc42) }

var fileDescriptor_8d127694bea2fc42 = []byte{
	// 362 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x4d, 0x4f, 0xc2, 0x40,
	0x14, 0x6c, 0xf9, 0x32, 0xae, 0x89, 0x92, 0x0d, 0x24, 0x8d, 0x1f, 0x85, 0xc0, 0x85, 0x83, 0xb6,
	0x41, 0xbd, 0x78, 0x6d, 0x50, 0x63, 0xa2, 0xc6, 0xf4, 0xe8, 0x41, 0xb2, 0x6d, 0x5f, 0xcb, 0x46,
	0xda, 0x6d, 0x76, 0x97, 0x06, 0xfe, 0x85, 0x3f, 0x8b, 0x23, 0x47, 0xe3, 0x81, 0x18, 0xfa, 0x47,
	0x4c, 0x0b, 0x24, 0x08, 0x27, 0x6e, 0xaf, 0x33, 0x6f, 0xa6, 0xf3, 0xb2, 0x83, 0xce, 0x23, 0xe6,
	0x0c, 0xc1, 0x94, 0x84, 0x53, 0xdf, 0x37, 0x93, 0xee, 0x6a, 0x32, 0x62, 0xce, 0x24, 0xc3, 0x27,
	0x39, 0x6b, 0xac, 0xb0, 0xa4, 0x7b, 0x5a, 0x0b, 0x58, 0xc0, 0x72, 0xce, 0xcc, 0xa6, 0xe5, 0x5a,
	0x8b, 0x22, 0xdc, 0xa3, 0x42, 0x72, 0xea, 0x8c, 0x24, 0x65, 0xd1, 0x7d, 0x24, 0xa9, 0x9c, 0x60,
	0x0d, 0x1d, 0x10, 0xcf, 0xe3, 0x20, 0x84, 0xa6, 0x36, 0xd5, 0xce, 0xa1, 0xbd, 0xfe, 0xc4, 0x77,
	0xa8, 0x2c, 0x06, 0x84, 0x83, 0x56, 0xc8, 0x70, 0xab, 0x3d, 0x9d, 0x37, 0x94, 0x9f, 0x79, 0xe3,
	0xcc, 0x65, 0x22, 0x64, 0x42, 0x78, 0x9f, 0x06, 0x65, 0x66, 0x48, 0xe4, 0xc0, 0x78, 0x86, 0x80,
	0xb8, 0x93, 0x1e, 0xb8, 0xf6, 0x52, 0xd1, 0x4a, 0x0b, 0xa8, 0xf2, 0x46, 0x38, 0x09, 0x37, 0x5c,
	0xd4, 0x7d, 0x5d, 0xf0, 0x07, 0xaa, 0x7b, 0x1b, 0x81, 0xfb, 0x90, 0x25, 0xa6, 0x20, 0xb4, 0x42,
	0xb3, 0xd8, 0x39, 0xba, 0x6e, 0x1b, 0x5b, 0x77, 0x1b, 0xbb, 0xe7, 0x59, 0xa5, 0xec, 0x7f, 0x76,
	0xcd, 0xdb, 0x66, 0x28, 0x08, 0xfc, 0x88, 0xaa, 0x92, 0x93, 0x48, 0xf8, 0xc0, 0xfb, 0x3e, 0x40,
	0xdf, 0x89, 0x85, 0x56, 0xcc, 0x53, 0x5e, 0xac, 0x52, 0xd6, 0x77, 0x53, 0x3e, 0x45, 0xd2, 0x3e,
	0x5e, 0xcb, 0x1e, 0x00, 0xac, 0x78, 0xd7, 0x28, 0x24, 0x63, 0xad, 0xb4, 0xaf, 0xd1, 0x0b, 0x19,
	0xe3, 0x4b, 0x84, 0xff, 0x19, 0x79, 0x10, 0xb1, 0x50, 0x2b, 0xe7, 0xef, 0x52, 0xdd, 0xd8, 0xed,
	0x65, 0xb8, 0xf5, 0x3a, 0x5d, 0xe8, 0xea, 0x6c, 0xa1, 0xab, 0xbf, 0x0b, 0x5d, 0xfd, 0x4a, 0x75,
	0x65, 0x96, 0xea, 0xca, 0x77, 0xaa, 0x2b, 0xef, 0xb7, 0x01, 0x95, 0x83, 0x91, 0x63, 0xb8, 0x2c,
	0x34, 0x45, 0xa6, 0x0b, 0x60, 0xc8, 0x12, 0xb8, 0x4a, 0x20, 0x92, 0x23, 0x0e, 0xc2, 0x5c, 0xf6,
	0x69, 0xbc, 0x6e, 0x94, 0x9c, 0xc4, 0x20, 0x9c, 0x4a, 0xde, 0x93, 0x9b, 0xbf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x27, 0x38, 0x1a, 0x35, 0x6e, 0x02, 0x00, 0x00,
}

func (m *DistributionEntity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DistributionEntity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DistributionEntity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Share.Size()
		i -= size
		if _, err := m.Share.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTariff(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTariff(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TransferFeeDenom) > 0 {
		i -= len(m.TransferFeeDenom)
		copy(dAtA[i:], m.TransferFeeDenom)
		i = encodeVarintTariff(dAtA, i, uint64(len(m.TransferFeeDenom)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size := m.TransferFeeMax.Size()
		i -= size
		if _, err := m.TransferFeeMax.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTariff(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.TransferFeeBps.Size()
		i -= size
		if _, err := m.TransferFeeBps.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTariff(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.DistributionEntities) > 0 {
		for iNdEx := len(m.DistributionEntities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DistributionEntities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTariff(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size := m.Share.Size()
		i -= size
		if _, err := m.Share.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTariff(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintTariff(dAtA []byte, offset int, v uint64) int {
	offset -= sovTariff(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DistributionEntity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTariff(uint64(l))
	}
	l = m.Share.Size()
	n += 1 + l + sovTariff(uint64(l))
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Share.Size()
	n += 1 + l + sovTariff(uint64(l))
	if len(m.DistributionEntities) > 0 {
		for _, e := range m.DistributionEntities {
			l = e.Size()
			n += 1 + l + sovTariff(uint64(l))
		}
	}
	l = m.TransferFeeBps.Size()
	n += 1 + l + sovTariff(uint64(l))
	l = m.TransferFeeMax.Size()
	n += 1 + l + sovTariff(uint64(l))
	l = len(m.TransferFeeDenom)
	if l > 0 {
		n += 1 + l + sovTariff(uint64(l))
	}
	return n
}

func sovTariff(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTariff(x uint64) (n int) {
	return sovTariff(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DistributionEntity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTariff
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DistributionEntity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DistributionEntity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTariff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTariff
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTariff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Share", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTariff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTariff
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTariff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Share.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTariff(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTariff
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTariff
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Share", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTariff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTariff
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTariff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Share.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionEntities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTariff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTariff
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTariff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DistributionEntities = append(m.DistributionEntities, DistributionEntity{})
			if err := m.DistributionEntities[len(m.DistributionEntities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferFeeBps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTariff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTariff
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTariff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TransferFeeBps.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferFeeMax", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTariff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTariff
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTariff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TransferFeeMax.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferFeeDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTariff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTariff
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTariff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransferFeeDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTariff(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTariff
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTariff(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTariff
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTariff
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTariff
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTariff
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTariff
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTariff
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTariff        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTariff          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTariff = fmt.Errorf("proto: unexpected end of group")
)
